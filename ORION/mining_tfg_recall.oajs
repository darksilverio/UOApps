//************ YOU MUST DO **********
//1 - PUT A BAG IN YOUR BANK AND ADD AS AN OBOJECT NAMED: miningBox
//2 - SET THE MINE POSITION ON THE mineRectangle VARIABLE(OBJECT)

var infoColor = 0x0185;
var errorColor = 0x0020;
var debugColor = 0x45F

var mineIndex = 4;
var mineRectangle = [
			{ Xsmall: 2565, Xbig:2599 , Ysmall: 429 , Ybig: 479,  rune: 2, active: false }, //Minoc
			{ Xsmall: 346, Xbig:389 , Ysmall: 1426 , Ybig: 1457, rune: 8, active: true }, //Mountain of Knowledge (limit 5 tiles from exit) top
			{ Xsmall: 1361, Xbig:1388 , Ysmall: 2705 , Ybig: 2724, rune: 6, active: true }, //Haunted Montain -- full mine
			{ Xsmall: 4805, Xbig:4817 , Ysmall: 3632 , Ybig: 3665, rune: 4, active: true },  //Monte Tresshorn - Fire Island -- full mine
			{ Xsmall: 1224, Xbig:1278 , Ysmall: 1211 , Ybig: 1247, rune: 13, active: true }, //Golden Mine
			{ Xsmall: 987, Xbig:1012 , Ysmall: 1574 , Ybig: 1597, rune: 9, active: true }, //Enchanted Mine
			{ Xsmall: 1414, Xbig:1435 , Ysmall: 2878 , Ybig: 2892, rune: 12, active: true }, //Mount of Darkness
			{ Xsmall: 2315, Xbig:2337 , Ysmall: 813 , Ybig: 825, rune: 11, active: true }, //Valley of Light
			{ Xsmall: 2430, Xbig:2449 , Ysmall: 867 , Ybig: 909, rune: 14, active: true } //Covetuos Mine --full  mine
				
				 ];  
		    
var miningRange = 50
var miningTools = '0x0E85|0x0E86';
var miningDelay=16000
var persist = false;
var bankweight = 380;
var oresType='0x19B7|0x19BA|0x19B8|0x19B9|0x0F0F|0x0F10|0x0F16|0x0F15|0x0F11|0x0F26|0x0F18|0x19B7|0x0F13'
var moveitemdelay=600

var newSpotMsgs='Try mining elsewhere|There is nothing here|That is too far|You have no line of sight|You cannot mine so close'
var sameSpotMsgs='You put'
var persistSpotMsgs='You loosen some rocks but fail'
var toolUsageMsg='Where do you want to use'
var garbageOreMsg='Ceramic|Rusty|Old Copper|Rose|Dull Copper|Agapite|Bronze|Shadow|Copper|Silver|Verite|Valorite'

// DONT CHANGE THESE VARS
var timeout=-1;
var lastStealth = -100

function Autostart()
{
	Orion.Terminate('Mining');
	
	Orion.Exec('SetViewRange', true);
	
	Orion.Print(infoColor, 'MINING WILL START IN 15 SECONDS');

	Orion.Wait(15000);
	
	Orion.Exec('Mining', true);	
}

function SetViewRange(dummy){	
	Orion.ClientViewRange(21);
	Orion.Wait(200);
	Orion.Print(infoColor, 'View Range set to: ' + Orion.ClientViewRange() );	
}


function Mining(){

	var closest;
	var closestTile;
	var mineCoords = [];
	
	Orion.Exec('AntiPlayer', true);	
	Orion.Exec('RESS', true);
	
	mineIndex = Orion.GetGlobal('mineIndex');
	DEBUG('mineIndex: ' + mineIndex)
	if(!mineIndex)
		ChangeMine();

	while(!Player.Dead() && Orion.Connected() )
	{
		DEBUG('Main Loop');
		
		 Meditation();
				
		 if( ! IsInBoundaires(Player.X(), Player.Y(), 2) ){
			DEBUG('Player NOT IsInBoundaires ');
		 	BankToMine();
		 	HidingAndStealth(); //next operaion may take some time
		 	mineCoords = FindMinableSpots(miningRange);
		 }
		
		//if you dont have spots to this mine yet
		 if(mineCoords.length <= 0 ){
			HidingAndStealth(); //next operaion may take some time
		 	mineCoords = FindMinableSpots(miningRange);
		 }
		
		closest = GetClosest(mineCoords);
		closestTile = mineCoords[closest];
				 
		 if(!IsInBoundaires(closestTile.x, closestTile.y) ) {
		 		DEBUG2('Spot discarted: ' + closestTile.x + ', ' + closestTile.y  );
				mineCoords = Remove(mineCoords, closest);
				 if(mineCoords.length <= 0 ){
		 			DEBUG2('All mined. Going to FullRestockAndMine >1<');
		 			FullRestockAndMine()
		 		}
				Orion.Wait(10);
				continue;
       	}
       
		PathFinder(closestTile.x, closestTile.y);

		Orion.CancelTarget();
		Orion.CancelWaitTarget();
    		Orion.ClearJournal();
     		  
     		Orion.Print(infoColor, ' ');
     		Orion.Print(infoColor, ' '); 
     		 
     		HidingAndStealth()  //next operaion may take some time
     		
     		timeout = Orion.Now();
		Dig(closestTile.x, closestTile.y);
		
		while( ( Orion.Now() - timeout ) < miningDelay ){    
		 	
     			if( Orion.InJournal(newSpotMsgs) || Orion.InJournal(garbageOreMsg) )
     			{	
     				DEBUG2('Garbage Ore/New spot (' +  (  Orion.Now() - timeout ) + 'ms)' );
				mineCoords = Remove(mineCoords, closest);
				break;
			}
			if( Orion.InJournal(persistSpotMsgs) )
			{	
				if(!persist){
				
					DEBUG2('NOT Persisting (' +  (  Orion.Now() - timeout ) + 'ms)' );
					mineCoords = Remove(mineCoords, closest);
				
				}else{
					DEBUG2('Persisting (' +  (  Orion.Now() - timeout ) + 'ms)' );
				}
				break;
			}
			if( Orion.InJournal(sameSpotMsgs) ){
				DEBUG2('Good Spot (' +  (  Orion.Now() - timeout ) + 'ms)');
				break;
			}
				
     			Orion.Wait(50);
     		}
     		//if MaxWeight reached OR all spots removed 
     		if( (Player.Weight() >= bankweight && bankweight > 0) || 
     			(mineCoords.length <= 0) ||
     			(Orion.InJournal('Adamantium')) ||
     			( Orion.Count(miningTools) <= 0   )  ||
     			( Orion.Count(0x0F7A) <= 5   )  ||
     			( Orion.Count(0x0F86) <= 5   )  ||
     			( Orion.Count(0x0F7B) <= 5   )  
     			 ){
     		
     			if(mineCoords.length <= 0)
     				DEBUG2('All mined. Going to FullRestockAndMine>2<');
     			else
     				DEBUG2('FullRestockAndMine (regs or mining tools or Adamantium or weight)');
     			
     			//get rid of all spots left 
     			mineCoords = [];
			FullRestockAndMine();
     		}
		Orion.Wait(50);	
	}
}

function Dig(x, y)
{
	DEBUG('Dig: ' + x + ', ' + y);
	var tool = Orion.FindType(miningTools, '-1', self, 'item|first', '-1', '-1');
      
      if(tool.length == 0)
	      tool =  Orion.FindType(miningTools, '-1', backpack, 'item|first', '-1', '-1');

     if (tool.length == 0)     {
     		Orion.Print(infoColor, 'NO MINING TOOL.');
     		FullRestockAndMine();
     	}
     	
     	Orion.WaitTargetTile('mine', x , y, 0);
     	Orion.UseObject(tool[0]);
     	Orion.WaitJournal(toolUsageMsg, Orion.Now(), Orion.Now() + 5000, 'sys', -1, -1);
}

function FindMinableSpots( range )
{	
    var mineCoords = [];
    
    var lowX =  Player.X() - range;
    var higX = Player.X() + range;
    
    var lowY =  Player.Y() - range;
    var higY = Player.Y() + range;
    
    var total = range * 2;
    var inc = 0;
    
    for (var x = lowX; x < higX; ++x){
    
    	Orion.Print( 'Scanning area: ' + ((++inc/total) * 100).toFixed(1) + '%' );
    	
       for (var y = lowY; y < higY; ++y){
        
           if (Orion.ValidateTargetTile('mine', x, y))
                mineCoords.push( { x: x, y: y} );       
        }
    }  
    return mineCoords;
}

function GetClosest(minesArr)
{

    var px = Player.X();
    var py = Player.Y();
    
    var closest = 0;
    var dsq = 1000;
    
    for (var i =0; i < minesArr.length; ++i)
    {
        var dx = Math.abs(px - minesArr[i].x);
        var dy = Math.abs(py - minesArr[i].y);
    
        var dq = dx + dy;
        
       			 //cant mine under yourself
        if (dq < dsq && dq != 0)
        {
            dsq = dq;
            closest = i;
         }
    }
    DEBUG('GetClosest: ' + closest);
    return closest;
}

function Remove(arr, idx)
{
    var result = [];
    for (var i = 0; i < arr.length; ++i)
    {
        if (i != idx)
	        result.push(arr[i]);
    }
    
    DEBUG2('Tiles Left: ' + arr.length);
    return result;
}

function PathFinder(x, y)
{
	DEBUG('PathFinder');
		
	Orion.OptionAlwaysRun(true);
	while(IsInBoundaires(x, y) && !Orion.WalkTo(x, y, -1, 2)){
		Orion.Wait(250);
		Orion.Print(31, 'Going to: ' + x + ', ' + y + ' Can walk: ' + Orion.CanWalk(Player.Direction(), x, y, -1));
	}
	
	Orion.OptionAlwaysRun(false);
}

function IsInBoundaires(x, y, precision){
	
	if(!precision)
		precision = 0;
	
	 if( x >= mineRectangle[mineIndex].Xsmall - precision  && x <= mineRectangle[mineIndex].Xbig + precision &&
	     y >= mineRectangle[mineIndex].Ysmall - precision  && y <= mineRectangle[mineIndex].Ybig + precision )
	{
		DEBUG("IsInBoundaires == true");
		return true; //in side rectangle 
	}
	
	DEBUG('IsInBoundaires == false');
	return false; //out side rectangle    	
}

function OreToBank(){

	Orion.Say('banker bank');		
	Orion.Wait(1000);	
	
	var bag = Orion.FindObject('miningBox');
	
	if(!bag)	{
		 Orion.Print(infoColor,'You have no deposit bag defined');
		 Orion.Terminate('Mining')
		 return;
	}
		
	var ores = Orion.FindType(oresType, '-1', backpack);

	for(var i = 0; i < ores.length; i++){
		Orion.MoveItem(ores[i], 0, bag.Serial());
		Orion.Wait(moveitemdelay);
	}
}

function MineToBank()
{
	Orion.Say('.recall 1 5');
	Orion.WaitJournal('soundecho: id=0x01FE', Orion.Now(), Orion.Now() + 13000, -1, -1, -1);
	Orion.Wait(600);
}

function BankToMine(){

	Orion.Say('.recall 1 ' + mineRectangle[mineIndex].rune );
	Orion.WaitJournal('soundecho: id=0x01FE', Orion.Now(), Orion.Now() + 13000, -1, -1, -1);
	Orion.Wait(600);
}

function ChangeMine(){

	mineIndex = Orion.GetGlobal('mineIndex');
	if(!mineIndex)
		mineIndex = mineRectangle.length - Orion.Random(0,mineRectangle.length );
			
	mineIndex++;
	
	if(mineIndex >= mineRectangle.length || mineIndex < 0)
		mineIndex = 0;
		
	while(mineRectangle[mineIndex].active == false)
		mineIndex++;
		
	DEBUG2('ChangeMine: ' +  mineIndex);
	Orion.SetGlobal('mineIndex', mineIndex);
}
function AntiPlayer() {

	var delay = 25;
	var range = 25;

	Orion.Ignore(self);

	while (!Player.Dead() && Orion.Connected()) {
		Orion.Wait(delay);
		
		mineIndex = Orion.GetGlobal('mineIndex');
		
		if( ! IsInBoundaires(Player.X(), Player.Y(), 2) ){
			Orion.Print(infoColor, 'Antiplayer allowed here.');
		 	Orion.Wait(5000);
		 	continue;
		 }

		var pksFound = Orion.FindType('0x0190|0x0191', '-1', ground, 'human', range, 'red|blue|gray|orange|green');

		if (pksFound.length == 0) 
			continue;
		
		/*	
		//IGNORE MAGINCIA BANK
		if (Player.X() > 3727 && Player.X() < 3744){
			if (Player.Y() < 2160 && Player.Y() > 2143){
				continue;
			}
		}	
		//IGNORE AREA DO GATE DE BRIT
		if (Player.X() > 1486 && Player.X() < 1509){
			if (Player.Y() < 1645 && Player.Y() > 1622){
				continue;
			}
		}	
		
		//IGNORE MINOC BANK
		if (Player.X() > 2460 && Player.X() < 2568){
			if (Player.Y() < 610 && Player.Y() > 514){
				continue;
			}
		}	
			
		*/
		DEBUG2('AntiPlayer in ACTION');
		Orion.UseType('0x0F0E', '0x0001', backpack, true); //invis
		Orion.Say('.recall 1 5');	// --> go to bank without	 delays
		Orion.BlockMoving(true);
		Orion.Terminate('Mining');
		Orion.Wait(1500);
		Orion.Screenshot();
		Orion.Wait(1500);
		Orion.Screenshot();
		Orion.BlockMoving(false);
		Orion.Wait(6000);
 		OreToBank();
 		Destock();
 		Restock();
 		ChangeMine();
		Orion.Exec('Autostart', true);
	}
}

function HidingAndStealth(){

	var timer;
		
	if(!Player.Hidden()){	
		Orion.UseSkill('Hiding');
		Orion.ClearJournal();
	
	
		timer = Orion.Now();
		while(!Player.Hidden() && Orion.Now() - timer < 6000 ){
		
			if(Orion.InJournal('seem to hide here|hidden', 'my|sys', -1, -1, Orion.Now() -1000, Orion.Now() + 1000) ){
				DEBUG2('Hidding Delay: ' + (Orion.Now() - timer) );
				break;
			}
			Orion.Wait(50)
		}
	}

	if(Player.Hidden() && ( (Math.abs(lastStealth - Player.StealthSteps()) >= 11 )  ||  Player.StealthSteps() == 0 ) ){
		
		lastStealth =  Player.StealthSteps();
		Orion.UseSkill('Stealth');
		Orion.ClearJournal();
		
		Orion.WaitJournal('not hidden|quietly', Orion.Now(), Orion.Now() + 10000, 'my|sys',-1,-1);
		return true;
	}
	
	return false;
}

function RESS(){

	while(true){
		Orion.Wait(500);
		
		if(!Player.Dead())
			continue;
		
		Orion.Terminate('all', 'RESS');
		ChangeMine();
		ToHelpRoom();
		Orion.Wait(500);
		Restock();
		Orion.Wait(500);
	
		Orion.WalkTo(2330, 534, -1, 0);
		
		Orion.Exec('Autostart', true);	
	}
}

function ToHelpRoom(dummy){

	var gump;

	Orion.HelpGump();
	
	Orion.WaitForGump(3000)
	
	gump = Orion.GetLastGump();		
	gump.Select( Orion.CreateGumpHook(7));
	
	Orion.WaitForGump(3000)
	
	gump = Orion.GetLastGump();
	gump.Select( Orion.CreateGumpHook(8) );
	
	Orion.Wait(45000);
	//Orion.Wait(1000);
	Orion.WalkTo(5448, 1192, -1, 0);
	// PathFinder(, );

	return 0;

}

function Restock(dummy){

	DEBUG2('Restocking ...');
	
	Orion.SayYell('banker bank');
	Orion.Wait(600);
	Orion.UseObject('srcBag');
	Orion.Wait(600);
	
	var pickaxes = Orion.FindType(miningTools, 0, 'srcBag',-1, 3);	
	for(var i=0; i < 3; i++){
		Orion.MoveItem(pickaxes[i], 1, backpack, -1,-1,-1);
		Orion.Wait(600);
	}
	
	var regs =  Orion.FindType('0x0F7A|0x0F86|0x0F7B', 0, 'srcBag',-1, 3);
		for(var i=0; i < 3; i++){
		Orion.MoveItem(regs[i], 10, backpack, -1,-1,-1);
		Orion.Wait(600);
	}
	
	var invis =  Orion.FindType('0x0F0E','0x0001', 'srcBag',-1, 3);
	Orion.MoveItem(invis[0], 2, backpack, -1,-1,-1);
	Orion.Wait(600);
}

function Destock(dummy){

	DEBUG2('Destocking ...');
	
	Orion.SayYell('banker bank');
	Orion.Wait(600);
	
	var pickaxes = Orion.FindType(miningTools, 0, backpack,-1, 3);	
	for(var i=0; i < pickaxes.length; i++){
		Orion.MoveItem(pickaxes[i], 1, 'srcBag', -1,-1,-1);
		Orion.Wait(600);
	}
	
	var regs =  Orion.FindType('0x0F7A|0x0F86|0x0F7B', 0, backpack,-1, 3);
		for(var i=0; i < regs.length; i++){
		Orion.MoveItem(regs[i], 1000, 'srcBag', -1,-1,-1);
		Orion.Wait(600);
	}
	
	var invis =  Orion.FindType('0x0F0E','-1', backpack,-1, 3);
	for(var i=0; i < invis.length; i++){
		Orion.MoveItem(invis[i], 1000, 'srcBag', -1,-1,-1);
		Orion.Wait(600);
	}
}

function FullRestockAndMine(){

	MineToBank();
	OreToBank();
	Destock();
	Restock();
	ChangeMine();
	BankToMine();
}

function Meditation(){

	if( Player.WarMode() == true  )
		Orion.WarMode(false);
		
	while(Player.Mana() <= 44 ){
		Orion.UseSkill('Meditation');
		Orion.Wait(1000);
	}
	DEBUG('Medit ends');
}
	//===========================================
function __OTHERS__(){}
	//===========================================

function EchoAllJournal(){

	while(true){
	
		var j = Orion.WaitJournal('a|e|i|o|u',  Orion.Now(), Orion.Now() + 10000 , -1 ,-1, -1);
		if(j)
			Orion.Print(0xff, j.Text());
		Orion.Wait(200);
	}
}


function DEBUG(msg){
	
	if(false)
		Orion.Print(debugColor, msg);
}

function DEBUG2(msg){
	
	if(true)
		Orion.Print(debugColor, msg);
}

function test(){


Orion.Print(mineIndex);

Orion.Print(mineIndex);
Orion.Print( IsInBoundaires(Player.X(), Player.Y(), 2) )
Orion.Print( Player.X() )
}
// GLOBAL VARIABLES
var infoColor = 0x0bb6;
var errorColor = 0x0bb6;
var highlightColor = 0x0bb6;
var debugColor = 0x45F;

var pontoDeFuga = {x: 2520, y: 3618}
var fugaIncremento = 0;

function ___EXP_ENHANCEMENT___(){}

function Autostart() {

	Orion.Terminate('all', 'Autostart');

	Orion.Wait(500);
	
	Orion.BlockMoving(false);
	Orion.OptionAlwaysRun(false);

	//Orion.Print(infoColor, 'BG Macro: HealBandageLong');
	//Orion.Exec('HealBandageLong', true);

	Orion.Print(infoColor, 'BG Macro: AutoKillEvento()');
	Orion.Exec('AutoKillEvento', true);
	
	Orion.Print(infoColor, 'BG Macro: HideBlood');
	Orion.Exec('HideBlood', true);
	
	Orion.Print(infoColor, 'BG Macro: AutoPotion');
	Orion.Exec('AutoPotion', true);

	Orion.Exec('SetViewRange', true);
}

function AutoKillEvento(){

	while(true)
	{
		var found = Orion.FindType('!0x0190|!0x0191', '-1', ground, "near|live|mobile`", 21, "gray|red");
		if (found.length == 0) 
		{
			Orion.Print(errorColor, "NOTHING TO KILL");
			fugaIncremento += 5;
			PathFinder(pontoDeFuga.x - fugaIncremento, pontoDeFuga.y - fugaIncremento);
			Orion.Wait(50);
			continue;
		}
		target = Orion.FindObject( found[0]);

		while(target != null)
		{
			//Orion.Print(errorColor, "Atacando: " + Orion.RequestName(found[0]))
			target = Orion.FindObject( found[0]);
			
			Orion.AddObject('follow', found[0])
			Orion.Exec('Follow', true);
			Orion.Attack(found[0]);

			if(Player.Hits() < 60 )
			{
				Orion.Print(errorColor, "Life muito baixo. RECUANDO!");
				PathFinder(pontoDeFuga.x, pontoDeFuga.y);
			}
			
			Orion.Wait(50);
		}
		FastLoot("null");
		//EquipWeaponAndShield();
		var contaPerigo = Orion.FindType('!0x0190|!0x0191', '-1', ground, "live|mobile`", 10, "gray|red");
		if(contaPerigo.length > 7 )
			{
				Orion.Print(errorColor, "Muito Perigo: " + contaPerigo.length);
				PathFinder(pontoDeFuga.x - fugaIncremento, pontoDeFuga.y - fugaIncremento);
				fugaIncremento = 0;
			}
			else{
			
				Orion.Print(errorColor, "POUCO Perigo: " + contaPerigo.length);
			}
		Orion.Wait(50);
	}
}

//------------------------------------------------------
//show name of creatures on screen
function AllNames()
{
	var macro = Orion.CreateClientMacro();
	macro.AddAction('AllNames');
	macro.Play(false, 1000);
}

//------------------------------------------------------
function SetViewRange()
{	
	Orion.ClientViewRange(21);
	Orion.Wait(200);
	Orion.Print(infoColor, 'View Range set to: ' + Orion.ClientViewRange() );	
}

//------------------------------------------------------
function HideBlood(){

	var blood;

	while(!Player.Dead())
	{
	
		blood = Orion.FindType('0x122C|0x122B|0x122F|0x122E|0x122D|0x122A|0x1645', '-1', ground, 12);
		
		for(var i=0; i < blood.length; i++)
			Orion.Hide(blood[i]);
			
		Orion.Wait(250);
	}
}

//================================================
//============= PVP PVM ============================
//================================================
function ___PVP_PVM___(){}
//------------------------------------------------------


function AutoPotion(){

	while(!Player.Dead()){
	Orion.Wait(300);
	
		if(Player.Hits() < 90 ){
			Orion.CharPrint(self, infoColor, "Potion: Life Boost");
			Orion.UseType('0x0F82','0x0026', backpack);
		}
	
	}
}
//------------------------------------------------------


function HealBandageLong() {
	var Msg = "You put the bloody bandage|Voce curou|failed";
	var lHand, rHand;
	var timer;
	
	var lifePercent;
	
	while (!Player.Dead()) {
		if(Orion.FindType('0x0E21', '-1', backpack).length > 0){
		
			lifePercent =  ( Player.Hits()/Player.MaxHits() ) * 100;
			//DEBUG(lifePercent);
			if (lifePercent > 70) {
				Orion.Wait(100);
				continue;
			}
			
			while( Player.Hits() < (Player.MaxHits() - 5)){
				Orion.CharPrint(self, infoColor, 'Auto Heal (80%)');
				
							
				rHand = Orion.ObjAtLayer('RightHand', self);
				lHand = Orion.ObjAtLayer('LeftHand', self);
			
				Orion.BandageSelf();
				
				timer = Orion.Now();
				Orion.Wait(600);
					
				if(lHand != null)
						Orion.UseObject(lHand.Serial());
				if(rHand != null){
	       			Orion.UseObject(rHand.Serial());
	       			Orion.WaitForTarget();
	       			Orion.CancelTarget();
	       		}
				
				Orion.ClearJournal(Msg);
				while ( (Orion.Now() - timer) < 6500) {
				
					if(Orion.InJournal(Msg))
						break
						
					Orion.Wait(100);
				}
			}
		}
	}
}

//follow item targeted forever
function Follow() {

	Orion.OptionAlwaysRun(true);


	var obj = Orion.FindObject('follow');
	if (obj == null) return;
	Orion.Click(obj.Serial());

	while (obj != null) {

		//when MOBS dies 
		if (!obj.X())
			break;

		Orion.WalkTo(obj.X(), obj.Y(), obj.Z());
		Orion.Wait(250);
	}
	
	Orion.OptionAlwaysRun(false);
}

function EquipWeaponAndShield() {

	Orion.WarMode(true);

	if (Player.Hits() < Player.MaxHits()) {
		Orion.CharPrint(self, infoColor, 'Weapon + Shield + Band');
		
		if(Orion.FindType('0x0E21', '-1', backpack).length <=  0){
			Orion.Print(errorColor, 'No more bandages.')
		}
		else{			
			//Better use of bandage at TFG
			Orion.CreateClientMacro('BandageSelf').Play(false, 1000);
		}
		
	} else
		Orion.CharPrint(self, infoColor, 'Weapon + Shield');
	
	var equipments = Orion.FindList('myShields', backpack);

	if (equipments.length > 0 ) 	
		Orion.UseObject(equipments[0]);

	equipments = Orion.FindList('myWeapons', backpack);

	if (equipments.length) 	
		Orion.UseObject(equipments[0]);
	
	
	Orion.Attack(lastattack);
	Orion.Wait(300);
	Orion.CancelTarget();
}

function MassMove() {
	Orion.CharPrint(self, infoColor, 'Move item type');

	Orion.Print('Select model item');
	Orion.AddObject('model');

	while (Orion.HaveTarget()) {
		Orion.Wait(20);
	}

	var obj = Orion.FindObject('model');

	if (obj == null || !obj.Exists())
		return;

	Orion.Print('Select container receiver');
	Orion.AddObject('receiver');
	while (Orion.HaveTarget()) {
		Orion.Wait(20);
	}

	var list = Orion.FindType(obj.Graphic(), obj.Color(), obj.Container());

	for (var i = 0; i < list.length; i++) {
		Orion.MoveItem(list[i], 0, 'receiver');
		Orion.Wait(600);
	}
}

function EmptyContainer() {
	Orion.CharPrint(self, infoColor, 'Empty Container');

	Orion.Print('Select container to empty');
	Orion.AddObject('emptycontainer', '0');
	Orion.AddObject('emptycontainer');
	Orion.Wait(100);

	while (Orion.HaveTarget())
		Orion.Wait(500);

	var obj = Orion.FindObject('emptycontainer');

	if (obj == null || !obj.Exists())
		return;

	Orion.Print('Select container receiver');
	Orion.AddObject('receiver', '0');
	Orion.AddObject('receiver');
	Orion.Wait(100);

	while (Orion.HaveTarget())
		Orion.Wait(500);

	Orion.UseObject('emptycontainer');
	Orion.Wait(300);

	var list = Orion.FindType('-1', '-1', 'emptycontainer');

	while (list.length > 0) {
		Orion.MoveItem(list[0], 0, 'receiver');
		Orion.Wait('moveitemdelay');
		list = Orion.FindType('-1', '-1', 'emptycontainer');
	}
}

// ##############################################################
// ############################### DOOR FUNCTIONS START #############
// ##############################################################


function autoDoor() {
	var portaFechada = Orion.FindType('0x3EB2|0x3EB1|0x0675|0x0677|0x0679|0x067B|0x067D|0x067F|0x0681|0x0683|0x0685|0x0687|0x0689|0x068B|0x068D|0x068F|0x0691|0x0693|0x0695|0x0697|0x0699|0x069B|0x069D|0x069F|0x06A1|0x06A3|0x06A5|0x06A7|0x06A9|0x06AB|0x06AD|0x06AF|0x06B1|0x06B3|0x06B5|0x06B7|0x06B9|0x06BB|0x06BD|0x06BF|0x06C1|0x06C3|0x06C5|0x06C7|0x06C9|0x06CB|0x06CD|0x06CF|0x06D1|0x06D3|0x06D5|0x06D7|0x06D9|0x06DB|0x06DD|0x06DF|0x06E1|0x06E3|0x06E5|0x06E7|0x06E9|0x06EB|0x06ED|0x06EF|0x06F1|0x06F3|0x06F5|0x0824|0x0826|0x0828|0x082A|0x082C|0x082E|0x0830|0x0832|0x0839|0x083B|0x083D|0x083F|0x0841|0x0843|0x0845|0x0847|0x084C|0x084E|0x0850|0x0852|0x0854|0x0856|0x0858|0x085A|0x0866|0x0868|0x086A|0x086C|0x086E|0x0870|0x0872|0x0874|0x1FED|0x1FEF|0x1FF1|0x1FF3|0x1FF5|0x1FF7|0x1FF9|0x1FFB|0x00E8|0x00EA|0x00EC|0x00EE|0x00F0|0x00F2|0x00F4|0x00F6|0x0314|0x0316|0x0318|0x031A|0x031C|0x031E|0x0320|0x0322|0x0324|0x0326|0x0328|0x032A|0x032C|0x032E|0x0330|0x0332|0x0334|0x0336|0x0338|0x033A|0x033C|0x033E|0x0340|0x0342|0x0344|0x0346|0x0348|0x034A|0x034C|0x034E|0x0350|0x0352|0x0354|0x0356|0x0358|0x035A|0x035C|0x035E|0x0360|0x0362', '-1', ground, '', 2);
	var portaAberta = Orion.FindType('0x3ED5|0x3ED4|0x0676|0x0678|0x067A|0x067C|0x067E|0x0680|0x0682|0x0684|0x0686|0x0688|0x068A|0x068C|0x068E|0x0690|0x0692|0x0694|0x0696|0x0698|0x069A|0x069C|0x069E|0x06A0|0x06A2|0x06A4|0x06A6|0x06A8|0x06AA|0x06AC|0x06AE|0x06B0|0x06B2|0x06B4|0x06B6|0x06B8|0x06BA|0x06BC|0x06BE|0x06C0|0x06C2|0x06C4|0x06C6|0x06C8|0x06CA|0x06CC|0x06CE|0x06D0|0x06D2|0x06D4|0x06D6|0x06D8|0x06DA|0x06DC|0x06DE|0x06E0|0x06E2|0x06E4|0x06E6|0x06E8|0x06EA|0x06EC|0x06EE|0x06F0|0x06F2|0x06F4|0x06F6|0x0825|0x0827|0x0829|0x082A|0x082C|0x082E|0x0831|0x0833|0x083A|0x083C|0x083E|0x0840|0x0842|0x0844|0x0846|0x0848|0x084D|0x084F|0x0851|0x0853|0x0855|0x0857|0x0859|0x085B|0x0867|0x0869|0x086B|0x086D|0x086F|0x0871|0x0873|0x0875|0x1FEE|0x1FF0|0x1FF2|0x1FF4|0x1FF6|0x1FF8|0x1FFA|0x1FFC|0x00E9|0x00EB|0x00ED|0x00EF|0x00F1|0x00F3|0x00F5|0x00F7|0x0315|0x0317|0x0319|0x031B|0x031D|0x031F|0x0321|0x0323|0x0325|0x0327|0x0329|0x032B|0x032D|0x032F|0x0331|0x0333|0x0335|0x0337|0x0339|0x033B|0x033D|0x033F|0x0341|0x0343|0x0345|0x0347|0x0349|0x034B|0x034D|0x034F|0x0351|0x0353|0x0355|0x0357|0x0359|0x035B|0x035D|0x035F|0x0361|0x0363', '-1', ground, '', 3);

	if (portaAberta.length > 0) {
		Orion.CharPrint(self, infoColor, 'Closing door');
		var porta = portaAberta;
	} else {
		Orion.CharPrint(self, infoColor, 'Opening door');
		var porta = portaFechada;
	}

	if (porta.length) {
		for (i = 0; i < 2; i++) {
			Orion.UseObject(porta[i]);
			//Orion.Wait(30);
		}
	}
}

// ##############################################################
// ############################### DOOR FUNCTIONS END #############
// ##############################################################

// ##############################################################
// ############################### AUTO LOOT FUNCTIONS START #########
// ##############################################################

function __LOOTING__(){}

function FastLoot() {
	
	
		var bodies = Orion.FindType('0x0ECD|0x2006|0x0ECA|0x0ECC', '-1', ground, '', 3);

		if (bodies.length) {
		
			for(var i=0; i < bodies.length; i++ )
			{

				//for(var j=0; j <= 2; j++ )
				//{
					Orion.UseObject(bodies[i]);
					LootLoadingLag(bodies[i]);
			
					Loot(bodies[i]);
				//}
			}
		}
	
}

function Loot(corpseSerial) {

	var attempCounter = 0;

	while (Orion.GetDistance(corpseSerial) <= 3) {
		
		//var lootList = Orion.FindList(listName, corpseSerial);
		
//		
		var lootList = Orion.FindType('-1', '-1', corpseSerial, 'item', '3', -1, true);

		if (lootList.length == 0) {
			Orion.Print(infoColor, attempCounter + " --ALL DONE LOOTING: " +  lootList.length );
			Orion.Ignore(corpseSerial);
			return;
		}	
		Orion.Print(infoColor, ++attempCounter + " -- Items to loot: " +  lootList.length );

		Orion.MoveItem(lootList[0], 0, backpack);
		Orion.Wait(200);
		
		if(attempCounter > 35)
		{
			Orion.Ignore(corpseSerial);
			Orion.Hide(corpseSerial);
			Orion.Exec('Autostart', true);
		}
		
	}
}

function LootLoadingLag(bodySerial) {
	
	var timer = Orion.Now();

	while (Orion.Now() - timer < 700 ){	
		if( Orion.FindType('-1', '-1', bodySerial, 'item', '3', -1, true).length > 0 )
			break;
				
		Orion.Wait(50);
	}
}

 
 
//=================================================
//============  DEBUG   ==============================
//=================================================
function DEBUG(msg){
	
	if(true)
		Orion.Print(debugColor, msg);
}

function DEBUG2(msg){
	
	if(true)
		Orion.Print(debugColor, msg);
}



function IsInBoundaries(x, y, precision, rect){

	 if( x >= rect.Xsmall - precision  && x <= rect.Xbig + precision &&
	     y >= rect.Ysmall - precision  && y <= rect.Ybig + precision )
	{
		return true; //in side rectangle 
	}
	
	return false; //out side rectangle  	
}

//=================================================
//============  TESTS   ==============================
//=================================================
function ___TESTS___(){}

function ping(){

	var timer, timer1;
	var cont = 0, sum = 0, med = 0, max = 0, min = 10000;
	var items = Orion.FindType(-1, '-1', -1, -1, 30, -1);
	
	if(!items.length){
		Orion.Print(infoColor, 'Please have more items arround you');
		return;
	}

	timer = Orion.Now();
	for(var i = items.length -1; i >= 0; i--){
	
		var med, count, sum;
		timer1 = Orion.Now();
		Orion.RequestName(items[i], 1000);
		timer1 = Orion.Now() - timer1;
		
		if(timer1 > 20){
			cont++;
			sum =  sum + timer1;
			med = sum/cont
			med = med.toFixed(0);
			
			if(timer1 > max)
				max = timer1;
				
			if(timer1 < min)
			min = timer1;
	
		}
		
		//Orion.Print(infoColor. self, 'Ping: ' + timer1);	
		Orion.Print(infoColor, 'ping: ' + timer1 + ' med: ' + med + ' min: ' + min + ' max: ' + max);	
	}
	
	Orion.Print(infoColor, 'Loops: ' + cont + ' Total time: ' + ( Orion.Now() - timer ) + ' ms');	
}


function EchoAllJournal(){

	while(true){
	
		var j = Orion.WaitJournal('a|e|i|o|u',  Orion.Now(), Orion.Now() + 10000 , -1 ,-1, -1);
		if(j)
			Orion.Print(0xff, j.Text());
		Orion.Wait(200);
	}
}


function ShowAllMobs(){

	Orion.Ignore(self);
	while(true){
	
		var mob = Orion.FindType(-1,-1,ground,'mobile',30)
		if(mob.length > 0){
		
			for(var i=0; i < mob.length; i++ ){
				var mobObj = Orion.FindObject(mob[i]);
				Orion.Print(0xff, (i+1) + '/' + mob.length + " MOB[" + Orion.GetDistance(mobObj.Serial()) + " tiles away] " + mobObj.Name());
				Orion.CharPrint(mobObj.Serial(), errorColor, (i+1) );
			}
			Orion.Print(0xff, '----------`');
		}
	Orion.Wait(200);
	}
}

function PlayAllSounds(){

	for(var i=0; i < 0xFFFF; i++){
 		DEBUG2('Playing: ' + i );
		Orion.Sound(i);
		Orion.Wait(1500);
	}
}

function PlayOneSound(){

	Orion.Wait(1500);
	Orion.Sound(107);
}

function DropZ() {

	var ZAjust = -29;
	

	Orion.Print(infoColor, 'Select an item to ajust height (Z axis is hard coded:' + ZAjust +')');
	Orion.AddObject('dropable');
	
	while (Orion.HaveTarget())
		Orion.Wait(50);

	
	var obj = Orion.FindObject('dropable',-1, ground, 3);
	
	Orion.Drop(obj.Serial(), 1, obj.X(), obj.Y(), + (Player.Z() + ZAjust) );
	
	Orion.Print(infoColor, 'Heigth set to: ' + obj.Z() );
	
	Orion.RemoveObject('dropable')

}


function decifraMap()
{

var msg='As coordenadas deste mapa';
while(true){

	if(Orion.InJournal(msg)){

		var a = Orion.InJournal(':').Text().split(':');;
		var b  = a[1].split(',');
		var c= b[0].trim().replace('"','');
		var x = c.split(' ')[0].replace('x=','');
		var y =  c.split(' ')[1].replace('y=','');
		Orion.Print(y+':'+x);


Orion.OpenOrionMap(20,20);

		Orion.ClearJournal(msg);
	
	}
}

}

function PrintColors(){

	for(var i =  0x0BB7; i >= 0; i--)	{
		Orion.Print(i,'Printing Colors: ' + i.toString(16));
		Orion.Wait(100);
	}
}


function PathFinder(x, y)
{
		
	Orion.OptionAlwaysRun(true);
	while(!Orion.WalkTo(x, y, Player.Z(), 1)){
		Orion.Wait(500);
		Orion.Print(31, 'Going to: ' + x + ', ' + y + ' Can walk: ' + Orion.CanWalk(Player.Direction(), x, y, -1));
	}
	
	Orion.OptionAlwaysRun(false);
}


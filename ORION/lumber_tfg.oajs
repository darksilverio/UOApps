var choppingTools = '0x0F51|0x0F4B|0x0F49';
var choppingDelay=12000
var persist = true;
var bankweight = 320;
var bagBankSerial=0x400F88D5  //BELZEBOSS
//var bagBankSerial=0x4006D740   //AMIGO
var logsType='0x1BDD'
var moveitemdelay=1500

function AutoLumber()
{
    PrintSelf('Started');

	Orion.OptionAlwaysRun(true);

    var axeSerial = EquipAxe();
    if (axeSerial == '')
        return;

    var treeCoords = FindTrees(100);
    while (treeCoords.length > 0)
    {
        PrintSelf(treeCoords.length + ' trees remaining');    	
        var closest = GetClosest(treeCoords);
        var treeCoord = treeCoords[closest];        
        treeCoords = Remove(treeCoords, closest);
        
        //MakeLastCarpentry();
        Orion.Wait(500);
        
        Orion.WalkTo(treeCoord.x, treeCoord.y, 0);
        
        var timeout = Orion.Now() + 3000;
        
        while (!InRange(treeCoord.x, treeCoord.y) && Orion.Now() < timeout)
        {
            PrintSelf('.');
            Orion.Wait(200);
        }
        
        if (InRange(treeCoord.x, treeCoord.y))
        {
            LumberTree(treeCoord.x, treeCoord.y, axeSerial);
        }
        
      if(Player.Weight() >= bankweight && bankweight > 0)
	{
		ToBank();
		Orion.Say('banker bank');		
		Orion.Wait(1000);	
		LogToBank();
	
	}

            
        PrintSelf('Tree Finished');
        Orion.OptionAlwaysRun(true);
    }

   // MakeLastCarpentry();
    Orion.Wait(500);

    PrintSelf('Finished');
}

function Remove(arr, idx)
{
    var result = [];
    for (var i = 0; i < arr.length; ++i)
    {
        if (i != idx)
        {
	        result.push(arr[i]);
	  }
    }
    
    return result;
}

function FindTrees(range)
{
    var treeCoords = [];
    
    var lowX =  Player.X() - range;
    var higX = Player.X() + range;
    
    var lowY =  Player.Y() - range;
    var higY = Player.Y() + range;
    
    var total = range * 2;
    var inc = 0;
    
    for (var x = lowX; x < higX; ++x){
    
    	Orion.Print( 'Scanning area: ' + ((++inc/total) * 100).toFixed(1) + '%' );
    	
       for (var y = lowY; y < higY; ++y){
        
           if (Orion.ValidateTargetTile('tree', x, y))
                treeCoords.push( { x: x, y: y} );       
        }
    
    }
    
    PrintSelf('Found ' + treeCoords.legth + ' trees');
    return treeCoords;
}

function GetClosest(treeCoords)
{
    var px = Player.X();
    var py = Player.Y();
    
    var closest = 0;
    var dsq = 1000;
    
    for (var i =0; i < treeCoords.length; ++i)
    {
        var dx = Math.abs(px - treeCoords[i].x);
        var dy = Math.abs(py - treeCoords[i].y);
    
        var dq = dx + dy;
        
        if (dq < dsq)
        {
            dsq = dq;
            closest = i;
        }
    }
    
    return closest;
}

function InRange(x, y)
{
    var dx = Math.abs(Player.X() - x);
    var dy = Math.abs(Player.Y() - y);
    
    return dx <2 && dy < 2;    
}

function LumberTree(x, y, axeSerial)
{
    var success = 'You put';
    var fail = 'You hack at the tree for a while, but fail to produce any useable wood.';
    var end = 'There is nothing here to chop|You put the logs in|There is no wood';
    var tooFar = 'That is too far away';
    
    var timeout = Orion.Now() + choppingDelay;
            
    while (true)
    {
        Orion.ClearJournal(success);
        Orion.ClearJournal(fail);
        Orion.ClearJournal(end);
        Orion.ClearJournal(tooFar);
        
        Orion.UseObject(axeSerial);
        Orion.WaitTargetTile('tree', x, y, 0);        
     
        var timeout = Orion.Now() + 12000;
            
        while (!(Orion.InJournal(success) 
            || Orion.InJournal(fail)
            || Orion.InJournal(end) 
            || Orion.InJournal(tooFar)
            || Orion.Now() > timeout)) 
        {
            Orion.Wait(200);
        }      

        if (Orion.InJournal(end) || Orion.InJournal(tooFar))
            return;
        
    }            
}

function EquipAxe()
{
    Orion.Unequip(2);
    Orion.Wait(500);

    var axes = Orion.FindType(choppingTools, 'backpack');
    
    if (axes.length == 0)
    {
        PrintSelf('Missing Axe');
        return '';
    }
    
    var axe = axes[0];    
    PrintSelf('Equiping Axe ' + axe);
    Orion.Equip(axe);
    Orion.Wait(500);
    
    return axe;
}

function PrintSelf(msg)
{
    	var oldUse = Orion.OptionScaleSpeech();
	var oldDelay = Orion.OptionScaleSpeechDelay();
    	Orion.OptionScaleSpeech(true);
	Orion.OptionScaleSpeechDelay(50);

    Orion.CharPrint('self', '30', msg);
    
    Orion.Wait(50);
    Orion.OptionScaleSpeech(oldUse);
	Orion.OptionScaleSpeechDelay(oldDelay);
}

function ToBank(){
	Orion.OptionAlwaysRun(true);
	PathFinder(536, 989);
	Orion.OptionAlwaysRun(false);
}

function LogToBank(){

	var logs = Orion.FindType(logsType, '-1', backpack);

	for(var i = 0; i < logs.length; i++){
		Orion.MoveItem(logs[i], 0, bagBankSerial);
		Orion.Wait(moveitemdelay);
	}
}



function PathFinder(x, y){

	var destination = false;
	while(destination == false){
		destination = Orion.WalkTo(x, y, -1, 2);
		Orion.Wait(100);
	}
}


function guards(){



while(!Player.Dead())
{
	Orion.Wait(100);
	if(Player.Hits() < 59)
		Orion.Say('guards');
	

}


}
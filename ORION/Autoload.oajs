// GLOBAL VARIABLES
var infoColor = 0x0185;
var errorColor = 0x028;
var highlightColor = 0x168;
var debugColor = 0x45F;

var AntiPKIgnoreAreas=[
					{ Xsmall: 2325, Xbig:2357 , Ysmall: 517 , Ybig: 553, active: true },     //commerce
					{ Xsmall: 5447, Xbig:5459 , Ysmall: 1186 , Ybig: 1198, active: true }, //helproom
					{ Xsmall: 6042, Xbig:6074 , Ysmall: 1191 , Ybig: 1235, active: true }, //arenas 1x1
					{ Xsmall: 1893, Xbig:1926 , Ysmall: 2112 , Ybig: 2126, active: true }  //tween tower
				];

// OBJECTS AND LISTS
//list myBows = EquipBow()
//list myWeapons = EquipWeaponAndShield()
//list myShields = EquipWeaponAndShield()
//list myFoods = SkillTaming() --- not implemented yet
//list autoLoot = FastLootRPGLoop

function ___EXP_ENHAN___(){}

function Autostart() {

	Orion.Terminate('all', 'Autostart');

	Orion.Wait(500);
	
	Orion.BlockMoving(false);
	Orion.OptionAlwaysRun(false);

	Orion.Print(infoColor, 'BG Macro: HealBandageLong');
	Orion.Exec('HealBandageLong', true);
	
	Orion.Print(infoColor, 'BG Macro: HealBandageSelf');
	Orion.Exec('HealBandageSelf', true);
	

	Orion.Print(infoColor, 'BG Macro: ParalyzeFree');
	Orion.Exec('ParalyzeFree', true);

	Orion.Print(infoColor, 'BG Macro: AutoLoot');
	Orion.Exec('FastLootRPGLoop', true);

	Orion.Print(infoColor, 'BG Macro: AntiPK');
	Orion.Exec('AntiPK', true);
	
	Orion.Print(infoColor, 'BG Macro: HideBlood');
	Orion.Exec('HideBlood', true);
	
	Orion.Print(infoColor, 'BG Macro: WatchManaStaminaPoison');
	Orion.Exec('WatchManaStaminaPoison', true);
	
	
	//Orion.Print(infoColor, 'BG Macro: ShapedIron');
	//Orion.Exec('ShapedIron', true);
	
	
	Orion.Exec('SetViewRange', true);
	
	
}

//show name of creatures on screen
function AllNames() {

	var macro = Orion.CreateClientMacro();
	macro.AddAction('AllNames');
	macro.Play(false, 1000);
}

function SetViewRange(){	
	Orion.ClientViewRange(21);
	Orion.Wait(200);
	Orion.Print(infoColor, 'View Range set to: ' + Orion.ClientViewRange() );	
}

function HideBlood(){

	var blood;

	while(!Player.Dead()){
	
		blood = Orion.FindType('0x122C|0x122B|0x122F|0x122E|0x122D|0x122A|0x1645', '-1', ground, 12);
		
		for(var i=0; i < blood.length; i++)
			Orion.Hide(blood[i]);
			
		Orion.Wait(150);
	}
}

//================================================
//============= PVP PVM ============================
//================================================
function ___PVP_PVM___(){}


function AttackNearestHostile() {

	Orion.Ignore(self);

	var list = Orion.FindType('-1', '-1', ground, 'mobile|near', 20, 'red|criminal');

	if (list.length != 0) {
		Orion.CharPrint(self, infoColor, "[Attack: " + Orion.FindObject(list[0]).Name() + "]");
		Orion.WarMode(true);
		Orion.Attack(list[0]);
	} else {
		Orion.WarMode(false);
	}
}

function AttackNext() {

	Orion.Ignore(self);

	var list = Orion.FindType('-1', '-1', ground, 'mobile|fast', '14', 'red|criminal');

	if (list.length == 0) {
		Orion.IgnoreReset();
		Orion.Ignore(self);
		list = Orion.FindType('-1', '-1', ground, 'mobile|fast', '14', 'red|criminal');
	}

	if (list.length != 0) {
		Orion.CharPrint(self, infoColor, "[Attack Next: " + Orion.FindObject(list[0]).Name() + "]");
		Orion.WarMode(true);
		Orion.Attack(list[0]);
		Orion.Ignore(list[0]);
	}

}

function CastMagicArrow() {
	Orion.CharPrint(self, infoColor, "Magic Arrow");
	Orion.Cast('Magic Arrow', Orion.ClientLastAttack() );	
}

function CastParalyze() {

	Orion.CharPrint(self, infoColor, "Paralyze");
	Orion.Cast('Paralyze',Orion.ClientLastAttack());
}

function CastParalizeField() {

	Orion.CharPrint(self, infoColor, "Paralyze Field");
	Orion.CancelTarget();
	Orion.Cast('Paralyze Field');
//	Orion.
}

function CastGreaterHeal() {

	Orion.CharPrint(self, infoColor, "Greater Heal");
	Orion.CancelTarget();
	Orion.Cast('Greater Heal', self);
}

function CastHealFree() {

	Orion.CharPrint(self, infoColor, "Heal");
	Orion.CancelTarget();
	Orion.Cast('Heal')
}

function WatchManaStaminaPoison(){

	while(!Player.Dead()){
	Orion.Wait(300);
	
		if(Player.Mana() < 13){
			Orion.CharPrint(self, infoColor, "Potion: Mana");
			Orion.UseType('0x0F82','0x0532', backpack);
		}
		
		if(Player.Stam() < 5){
			Orion.CharPrint(self, infoColor, "Potion: Stam");
			Orion.UseType('0x0F0E','0x017F', backpack);
		}
		
		if(Player.Poisoned()){
			Orion.CharPrint(self, infoColor, "Potion: Cure");
			Orion.UseType('0x0F0E','0x008F', backpack);
		
		}
	
	}


}

function CastLightningFlood(){

	
	var timer;
	var msgCancel = 'Skill Magery cancelada.|Target is not in line|t see the target';
	//var msgCast =  'soundecho: id=0x0029';
	var msgCast =  'soundecho: id=0x01E5';
	
	
	Orion.CharPrint(self, infoColor, "Flood Magic Arrow");
	//Orion.Say('Chuva de MA');
	
	while(!Player.Dead() &&  !Player.Paralyzed() ){
		Orion.Wait(50);
		Orion.CancelTarget();
		
		timer = Orion.Now();
		//Orion.Cast('Magic Arrow', Orion.ClientLastAttack());
		Orion.Cast('Magic Arrow', Orion.ClientLastAttack());
	
		Orion.ClearJournal(msgCancel);
		Orion.ClearJournal(msgCast);
		while(Orion.Now() - timer < 3500 )
		{
			if( Orion.InJournal(msgCancel, 'my|sys', -1, -1, Orion.Now(), Orion.Now() + 500) ){
				break;
			}
			
			var msg = Orion.InJournal(msgCast, 'my|sys', -1, -1, Orion.Now(), Orion.Now() + 500);
			
			if(!msg)	
				continue;
			
			msg = msg.Text();
			if( msg.search(Player.X()) && msg.search(Player.Y()) ){
				break;
			}
			
			Orion.Wait(50);
		}
		DEBUG2('Raio: ' + (Orion.Now() - timer ) );
	
	}


}

function SkillTracking() {
	Orion.CharPrint(self, infoColor, "Tracking");
	Orion.WarMode(false);
	Orion.CancelWaitMenu();
	Orion.UseSkill('Tracking');
}

function SkillTrackingPlayer() {

	Orion.CharPrint(self, infoColor, "Track Players");

	Orion.WarMode(false);
	Orion.CancelWaitMenu();
	Orion.UseSkill('Tracking');
	Orion.WaitMenu('Tracking', 3);
}

function SkillTaming() {

	var exitMsgs = "Auto control|already belong to you|novo mestre";
	var loopMsgs = "too far|linha de visao|Voce falhou|in that state";


	Orion.CharPrint(self, infoColor, "Animal Taming");

	Orion.Print(infoColor, 'What do you want to tame ?');
	Orion.AddObject('animalTame');

	while (Orion.HaveTarget())
		Orion.Wait(50);
		
	var animal = Orion.FindObject('animalTame');

	if (animal == null || !animal.Exists())	{
		Orion.RemoveObject('animalTame');
		return;
	}
		

	Orion.ClearJournal(exitMsgs);
	Orion.ClearJournal(loopMsgs);


	Orion.WarMode(false);

	var timer = Orion.Now() + 15000;

	while (Orion.Now() < timer) {

		Orion.WaitTargetObject(animal.Serial());
		Orion.UseType('0x0EB2'); //Harp
		
		Orion.WaitJournal(exitMsgs + '|' + loopMsgs, Orion.Now(), Orion.Now() + 7000, 'sys', 0, 0xFFFF);

		if (Orion.InJournal(exitMsgs)) {
			Orion.Print(infoColor, 'Taming complete !');
			Orion.Say('ALL COME');
			break;
		}

		if (Orion.InJournal(loopMsgs)) {
			timer = Orion.Now() + 15000;
			Orion.Wait(150);
			continue;
		}
	}
	Orion.RemoveObject('animalTame');
}




//follow item targeted forever
function Follow() {

	Orion.CharPrint(self, infoColor, 'Follow something');
	Orion.Print(0x60, 'What do you want to follow ?');

	Orion.OptionAlwaysRun(true);

	Orion.AddObject('follow')
	while (Orion.HaveTarget()) {
		Orion.Wait(10)
	}
	var obj = Orion.FindObject('follow');
	if (obj == null) return;
	Orion.Click(obj.Serial());

	while (obj != null) {

		//when MOBS dies 
		if (!obj.X())
			break;

		Orion.WalkTo(obj.X(), obj.Y(), obj.Z());
		Orion.Wait(50);
	}
	
	Orion.OptionAlwaysRun(false);
	Orion.CharPrint(self, infoColor, 'Stopped Following');
}

function HealBandageSelf(){

	var msg = "You put the bloody bandage|Your healing was interrupted";
	var timer;
	var lifePercent;

	while (!Player.Dead()) {
	
		Orion.Wait(100);
		lifePercent =  ( Player.Hits()/Player.MaxHits() ) * 100;
		
		if( lifePercent > 40 )
			continue;
			
		while(lifePercent < 100){
	
			Orion.Wait(100);
			Orion.CharPrint(self, errorColor, 'CRITICAL Heal (40%)');
			
			Orion.CreateClientMacro('BandageSelf').Play(false, 1000);
			
			Orion.ClearJournal(msg);
			Orion.WaitJournal(msg, Orion.Now(), Orion.Now() + 2500, 'my|sys', -1, -1)
			
			lifePercent =  ( Player.Hits()/Player.MaxHits() ) * 100;	
		}
	}
}


function HealBandageLong() {
	var Msg = "You put the bloody bandage|Voce curou|failed";
	var lHand, rHand;
	var timer;
	
	var lifePercent;
	
	while (!Player.Dead()) {
		if(Orion.FindType('0x0E21', '-1', backpack).length > 0){
		
			lifePercent =  ( Player.Hits()/Player.MaxHits() ) * 100;
			//DEBUG(lifePercent);
			if (lifePercent > 80) {
				Orion.Wait(100);
				continue;
			}
			
			while( Player.Hits() < (Player.MaxHits() - 5)){
				Orion.CharPrint(self, infoColor, 'Auto Heal (80%)');
				
							
				rHand = Orion.ObjAtLayer('RightHand', self);
				lHand = Orion.ObjAtLayer('LeftHand', self);
			
				Orion.BandageSelf();
				
				timer = Orion.Now();
				Orion.Wait(600);
					
				if(lHand != null)
						Orion.UseObject(lHand.Serial());
				if(rHand != null){
	       			Orion.UseObject(rHand.Serial());
	       			Orion.WaitForTarget();
	       			Orion.CancelTarget();
	       		}
				
				Orion.ClearJournal(Msg);
				while ( (Orion.Now() - timer) < 6500) {
				
					if(Orion.InJournal(Msg))
						break
						
					Orion.Wait(100);
				}
			}
		}else{
			Orion.Print(errorColor, 'No more bandages.')
			Orion.Wait(5000);
		}
	}
}

function Meditation() {

	Orion.CharPrint(self, infoColor, 'Meditation');
	Orion.WarMode(false);
	Orion.UseSkill('Meditation');
}

function ParalyzeFree() {

	var lexplo;

	while (!Player.Dead()) {
		if (Player.Frozen() || Player.Paralyzed() ) {
		
			Orion.CharPrint(self, infoColor, 'Paralyze free');
			lexplo = Orion.FindType(0x0F02, backpack);
			
			if(lexplo.length){
			
				Orion.Cast('Magic Arrow', lexplo[0]);
				Orion.Wait(3000);
			}
			else{
			
				DEBUG2('else');
				Orion.Cast('Dispel', self);
				Orion.Wait(3000);
			}
			
			DEBUG2('You are Paralyzed');
		} 
		Orion.Wait(500);
	}
}

function StealtForever() {
	var stealth = false;

	Orion.WarMode(false);
	Orion.UseSkill('hiding');


	for (var i = 1; i <= 3; i++) {

		Orion.CharPrint(self, infoColor, 'Hidding ' + i);
		Orion.ClearJournal();
		Orion.Wait(1050)

		if (Orion.InJournal('You stop trying to hide')) {
			Orion.CharPrint(self, infoColor, 'Hidding cancelled ');
			break;
		};
	}

	while (!Player.Hidden())
		Orion.Wait(50);

	while (Player.Hidden()) {
		Orion.UseSkill('stealth');
		Orion.ClearJournal();
		while (!Orion.InJournal('You begin') && Player.Hidden()) {
			Orion.Wait(100);
		}
		if (!stealth && Player.Hidden()) {
			Orion.CharPrint(self, infoColor, 'Stealth Active ');
			stealth = true;
		}
	}
	Orion.CharPrint(self, infoColor, 'Stealth cancelled ');
}

function RunAway() {
	Orion.CharPrint(self, infoColor, 'Run Away ');

	Orion.Terminate('all', 'RunAway');

	var invisPotion = Orion.FindType('0x0F0E', '0x0001', backpack, '', '1', ' 1', true);

	if (invisPotion.length > 0)
		Orion.UseObject(invisPotion[0]);
	else
		Orion.Print(errorColor, 'No more invis potions =(');

	Orion.Say('.recall 1,1');
	Orion.BandageSelf();
	Orion.Wait(5000);
	Orion.Exec('Autostart', true);

}

function GoHome() {
	Orion.CharPrint(self, infoColor, 'Go Home ');

	Orion.Say('.recall 1,1');
	Orion.BandageSelf();
}

function EquipBow() {

	Orion.WarMode(true);

	if (Player.Hits() < Player.MaxHits()) {

		Orion.CharPrint(self, infoColor, 'Equip Bow + Band');
		
		if(Orion.FindType('0x0E21', '-1', backpack).length <=  0){
			Orion.Print(errorColor, 'No more bandages.')
		}
		else{			
			//Better use of bandage at TFG
			Orion.CreateClientMacro('BandageSelf').Play(false, 1000);
		}
		
	} else 
		Orion.CharPrint(self, infoColor, 'Equip Bow');

	var bows = Orion.FindList('myBows', backpack);

	if (bows.length > 0){
		Orion.UseObject(bows[0])
		Orion.Attack(lastattack);
	}

}

function EquipWeaponAndShield() {

	Orion.WarMode(true);

	if (Player.Hits() < Player.MaxHits()) {
		Orion.CharPrint(self, infoColor, 'Weapon + Shield + Band');
		
		if(Orion.FindType('0x0E21', '-1', backpack).length <=  0){
			Orion.Print(errorColor, 'No more bandages.')
		}
		else{			
			//Better use of bandage at TFG
			Orion.CreateClientMacro('BandageSelf').Play(false, 1000);
		}
		
	} else
		Orion.CharPrint(self, infoColor, 'Weapon + Shield');
	
	var equipments = Orion.FindList('myShields', backpack);

	if (equipments.length > 0 ) 	
		Orion.UseObject(equipments[0]);

	equipments = Orion.FindList('myWeapons', backpack);

	if (equipments.length) 	
		Orion.UseObject(equipments[0]);
	
	
	Orion.Attack(lastattack);
	Orion.Wait(300);
	Orion.CancelTarget();
}

function PVMCasts() {

	Orion.CharPrint(self, infoColor, 'Protection');
	Orion.Cast('Protection', 'self');
	Orion.Wait(3000);

	Orion.CharPrint(self, infoColor, 'Reactive Armor');
	Orion.Cast('Reactive Armor', 'self');
	Orion.Wait(3000);

	Orion.CharPrint(self, infoColor, 'Agility');
	Orion.Cast('Agility', 'self');
	Orion.Wait(3000);

	Orion.CharPrint(self, infoColor, 'Magic Reflection');
	Orion.Cast('Magic Reflection', 'self');
	Orion.Wait(3000);

	if (Player.Hits() < Player.MaxHits()) {
		Orion.BandageSelf();
		Orion.Wait(400);
	}
}


function MassMove() {
	Orion.CharPrint(self, infoColor, 'Move item type');

	Orion.Print('Select model item');
	Orion.AddObject('model');

	while (Orion.HaveTarget()) {
		Orion.Wait(20);
	}

	var obj = Orion.FindObject('model');

	if (obj == null || !obj.Exists())
		return;

	Orion.Print('Select container receiver');
	Orion.AddObject('receiver');
	while (Orion.HaveTarget()) {
		Orion.Wait(20);
	}

	var list = Orion.FindType(obj.Graphic(), obj.Color(), obj.Container());

	for (var i = 0; i < list.length; i++) {
		Orion.MoveItem(list[i], 0, 'receiver');
		Orion.Wait(600);
		//DEBUG(i + '/' + list.length);


	}
}

function EmptyContainer() {
	Orion.CharPrint(self, infoColor, 'Empty Container');

	Orion.Print('Select container to empty');
	Orion.AddObject('emptycontainer', '0');
	Orion.AddObject('emptycontainer');
	Orion.Wait(100);

	while (Orion.HaveTarget())
		Orion.Wait(500);

	var obj = Orion.FindObject('emptycontainer');

	if (obj == null || !obj.Exists())
		return;

	Orion.Print('Select container receiver');
	Orion.AddObject('receiver', '0');
	Orion.AddObject('receiver');
	Orion.Wait(100);

	while (Orion.HaveTarget())
		Orion.Wait(500);

	Orion.UseObject('emptycontainer');
	Orion.Wait(300);

	var list = Orion.FindType('-1', '-1', 'emptycontainer');

	while (list.length > 0) {
		Orion.MoveItem(list[0], 0, 'receiver');
		Orion.Wait('moveitemdelay');
		list = Orion.FindType('-1', '-1', 'emptycontainer');
	}
}

// ##############################################################
// ############################### DOOR FUNCTIONS START #############
// ##############################################################


function autoDoor() {
	var portaFechada = Orion.FindType('0x3EB2|0x3EB1|0x0675|0x0677|0x0679|0x067B|0x067D|0x067F|0x0681|0x0683|0x0685|0x0687|0x0689|0x068B|0x068D|0x068F|0x0691|0x0693|0x0695|0x0697|0x0699|0x069B|0x069D|0x069F|0x06A1|0x06A3|0x06A5|0x06A7|0x06A9|0x06AB|0x06AD|0x06AF|0x06B1|0x06B3|0x06B5|0x06B7|0x06B9|0x06BB|0x06BD|0x06BF|0x06C1|0x06C3|0x06C5|0x06C7|0x06C9|0x06CB|0x06CD|0x06CF|0x06D1|0x06D3|0x06D5|0x06D7|0x06D9|0x06DB|0x06DD|0x06DF|0x06E1|0x06E3|0x06E5|0x06E7|0x06E9|0x06EB|0x06ED|0x06EF|0x06F1|0x06F3|0x06F5|0x0824|0x0826|0x0828|0x082A|0x082C|0x082E|0x0830|0x0832|0x0839|0x083B|0x083D|0x083F|0x0841|0x0843|0x0845|0x0847|0x084C|0x084E|0x0850|0x0852|0x0854|0x0856|0x0858|0x085A|0x0866|0x0868|0x086A|0x086C|0x086E|0x0870|0x0872|0x0874|0x1FED|0x1FEF|0x1FF1|0x1FF3|0x1FF5|0x1FF7|0x1FF9|0x1FFB|0x00E8|0x00EA|0x00EC|0x00EE|0x00F0|0x00F2|0x00F4|0x00F6|0x0314|0x0316|0x0318|0x031A|0x031C|0x031E|0x0320|0x0322|0x0324|0x0326|0x0328|0x032A|0x032C|0x032E|0x0330|0x0332|0x0334|0x0336|0x0338|0x033A|0x033C|0x033E|0x0340|0x0342|0x0344|0x0346|0x0348|0x034A|0x034C|0x034E|0x0350|0x0352|0x0354|0x0356|0x0358|0x035A|0x035C|0x035E|0x0360|0x0362', '-1', ground, '', 2);
	var portaAberta = Orion.FindType('0x3ED5|0x3ED4|0x0676|0x0678|0x067A|0x067C|0x067E|0x0680|0x0682|0x0684|0x0686|0x0688|0x068A|0x068C|0x068E|0x0690|0x0692|0x0694|0x0696|0x0698|0x069A|0x069C|0x069E|0x06A0|0x06A2|0x06A4|0x06A6|0x06A8|0x06AA|0x06AC|0x06AE|0x06B0|0x06B2|0x06B4|0x06B6|0x06B8|0x06BA|0x06BC|0x06BE|0x06C0|0x06C2|0x06C4|0x06C6|0x06C8|0x06CA|0x06CC|0x06CE|0x06D0|0x06D2|0x06D4|0x06D6|0x06D8|0x06DA|0x06DC|0x06DE|0x06E0|0x06E2|0x06E4|0x06E6|0x06E8|0x06EA|0x06EC|0x06EE|0x06F0|0x06F2|0x06F4|0x06F6|0x0825|0x0827|0x0829|0x082A|0x082C|0x082E|0x0831|0x0833|0x083A|0x083C|0x083E|0x0840|0x0842|0x0844|0x0846|0x0848|0x084D|0x084F|0x0851|0x0853|0x0855|0x0857|0x0859|0x085B|0x0867|0x0869|0x086B|0x086D|0x086F|0x0871|0x0873|0x0875|0x1FEE|0x1FF0|0x1FF2|0x1FF4|0x1FF6|0x1FF8|0x1FFA|0x1FFC|0x00E9|0x00EB|0x00ED|0x00EF|0x00F1|0x00F3|0x00F5|0x00F7|0x0315|0x0317|0x0319|0x031B|0x031D|0x031F|0x0321|0x0323|0x0325|0x0327|0x0329|0x032B|0x032D|0x032F|0x0331|0x0333|0x0335|0x0337|0x0339|0x033B|0x033D|0x033F|0x0341|0x0343|0x0345|0x0347|0x0349|0x034B|0x034D|0x034F|0x0351|0x0353|0x0355|0x0357|0x0359|0x035B|0x035D|0x035F|0x0361|0x0363', '-1', ground, '', 3);

	if (portaAberta.length > 0) {
		Orion.CharPrint(self, infoColor, 'Closing door');
		var porta = portaAberta;
	} else {
		Orion.CharPrint(self, infoColor, 'Opening door');
		var porta = portaFechada;
	}

	if (porta.length) {
		for (i = 0; i < 2; i++) {
			Orion.UseObject(porta[i]);
			//Orion.Wait(30);
		}
	}
}

// ##############################################################
// ############################### DOOR FUNCTIONS END #############
// ##############################################################

// ##############################################################
// ############################### AUTO LOOT FUNCTIONS START #########
// ##############################################################

function __LOOTING__(){}

function FastLootRPGLoop() {

	

	Orion.IgnoreReset();
	
	while (Orion.Connected()) {
		FastLoot('autoLoot');
		Orion.Wait(100);
	}
}

function FastLoot(listName) {
	
	var bodies = Orion.FindType('0x0ECD|0x2006|0x0ECA|0x0ECC', '-1', ground, 'fast', 3);

	if (bodies.length) {
		
		var t = Orion.Now();
		
		Orion.UseObject(bodies[0]);
		LootLoadingLag(bodies[0]);
			
		Loot(listName, bodies[0]);
		
		var splitName = Orion.RequestName(bodies[0], 1500)
		splitName =  splitName.split(' ').slice(3).join(' ');
		
		Orion.Print(0x0A4, 'Loot Completed: ' + splitName + ' (' + (Orion.Now() - t) + ' ms)' );
		
	}
}

function Loot(listName, corpseSerial) {

	//GETTING PLAYER BAG
	//TODO: MAKE PROMPT FOR BAG OR ADD TO THE OBJECT LIST AND VALIDATE BEFORE LOOP
	//var bag = '0x0E75';
	//var lootBagList = Orion.FindType(bag);

	//Orion.AddObject('lootpack', Orion.GetSerial(backpack));

	var prevItem = null;
	while (Orion.GetDistance(corpseSerial) <= 3) {
		
		var lootList = Orion.FindList(listName, corpseSerial);
		//var lootList = Orion.FindType('-1', '-1', corpseSerial, 'fast', 3);

		if (lootList.length == 0) {
			Orion.Ignore(corpseSerial);
			return;
		}	
		
		if(prevItem != null)
			Orion.Wait(200);
		

		if(prevItem != lootList[0] ){
			var item = Orion.FindObject(lootList[0]);
			Orion.Print(0x0793, item.Count() + ' ' +Orion.RequestName(lootList[0], 1500) );
		}

		Orion.MoveItem(lootList[0], 0, backpack);
		timer = Orion.Now();
				
		prevItem =  lootList[0];
	}
}

function PrintItemDetails(dummy){

	var item = Orion.FindObject(  Orion.GetGlobal('gTMP') );
	Orion.Print(debugColor, item.Count() + ' ' +Orion.RequestName(item.Serial(), 1500) );
	
}
function Skining() {
	
	Orion.CharPrint(self, infoColor, 'Cut Corpse' );
	Orion.WaitTargetObject('corpse');
	
	equipments = Orion.FindList('myWeapons', self);
	if (!equipments.length)
		equipments = Orion.FindList('myWeapons', backpack);
	if (!equipments.length)
		Orion.CharPrint(self, infoColor, 'You have no utting weapon to use' );
		
	Orion.UseObject(equipments[0]);
	
	Orion.Terminate('FastLootRPGLoop');
	Orion.Wait(200);
	Orion.Exec('FastLootRPGLoop', true);
	Orion.Wait(200);
}


function LootLoadingLag(bodySerial) {
	
	var timer = Orion.Now();

	while (Orion.Now() - timer < 550 ){	
		if(Orion.FindType('-1', '-1', bodySerial).length > 0 )
			break;
				
		Orion.Wait(50);
	}
}


function Scavenger() {
	
	var list;
	
	while(!Player.Dead()){
		
		Orion.Wait(100);
	
		list = Orion.FindList('scavenger', 'ground','',3)     
		if (!list.length)
			continue;
	
		Orion.CharPrint(self, infoColor, 'Scavenging...');
	
		for (var i = 0; i < list.length; i++){
			Orion.MoveItem(list[i], 0, 'lootpack');
	      	Orion.Wait(1100);
		}     
	}
	
	return true;
 }
 
 
 
// ##############################################################
// ############################### AUTO LOOT FUNCTIONS END #########
// ##############################################################

//lock animal with sheaf
function SuperFeno() {

	var delay = 600;

	Orion.Ignore(self);

	var mob = Orion.FindType('-1', '-1', ground, 'mobile|near|fast', '1', 'gray|red');
	var feno = Orion.FindType('0x0F36', '-1', self, 'item', 1, 0, true);

	if (!mob.length) {
		Orion.CharPrint(self, infoColor, 'No GRAY MOB found in 2 tiles range');
		return;
	}
	if (!feno.length) {
		Orion.CharPrint(self, infoColor, 'No sheaf of hay in your backpack');
		return;
	}

	mob = Orion.FindObject(mob[0]);
	Orion.CharPrint(self, infoColor, "Locking: " + mob.Name());

	Orion.Drop(feno[0], 1, mob.X() - 1, mob.Y(), -1);
	Orion.Wait(delay);
	Orion.Drop(feno[3], 1, mob.X(), mob.Y() - 1,  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[1], 1, mob.X() + 1, mob.Y(),  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[2], 1, mob.X(), mob.Y() + 1, -1);

	Orion.Wait(delay);

	Orion.Drop(feno[4], 1, Player.X() - 1, Player.Y(), -1);
	Orion.Wait(delay);
	Orion.Drop(feno[5], 1, Player.X() + 1, Player.Y(), -1);
	Orion.Wait(delay);
	Orion.Drop(feno[6], 1, Player.X(), Player.Y() - 1, -1);
	Orion.Wait(delay);
	Orion.Drop(feno[7], 1, Player.X(), Player.Y() + 1, -1);
}

function Corridor() {

	var delay = 600;

	var feno = Orion.FindType('0x0F36', '-1', self, 'item', 1, 0, true);

	if (!feno.length) {
		Orion.CharPrint(self, infoColor, 'No sheaf of hay in your backpack');
		return;
	}

	Orion.CharPrint(self, infoColor, "Corridor Vertical");

	Orion.Drop(feno[1], 1, Player.X() + 1, Player.Y() + 1,  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[2], 1, Player.X() + 1, Player.Y(),  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[3], 1, Player.X() + 1, Player.Y() - 1,  -1);
	Orion.Wait(delay);

	Orion.Drop(feno[4], 1, Player.X() - 1, Player.Y() + 1,  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[5], 1, Player.X() - 1, Player.Y(), -1);
	Orion.Wait(delay);
	Orion.Drop(feno[6], 1, Player.X() - 1, Player.Y() - 1,  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[7], 1, Player.X(), Player.Y() + 1,  -1);
	Orion.Wait(delay);
	Orion.Drop(feno[8], 1, Player.X(), Player.Y() - 1,  -1);

}

function ColectFeno() {

	Orion.Terminate('Corridor');
	Orion.Terminate('SuperFeno');

	var pickupDelay = 1000;
	var msg = 'You can not pick that up'
	var timeout;

	Orion.CharPrint(self, infoColor, "Colecting sheaf ...");

	for (j = 0; j < 2; j++) {
		var feno = Orion.FindType('0x0F36', '-1', ground, 'item', 3, 0, true);

		for (var i = 0; i < feno.length; i++) {

			Orion.ClearJournal(msg);
			Orion.MoveItem(feno[i], 0, backpack);

			timeout = Orion.Now() + pickupDelay;
			while (Orion.Now() <= timeout) {

				if (Orion.InJournal(msg)) {
					break;
				}
				Orion.Wait(50);
			}
		}
	}
}

//======================================================
//==================== ANTI PK ============================
//======================================================
function ___ANTI_PKs___(){}
function AntiPKOFF(){
	Orion.Print(infoColor, 'Anti PK OFF' );
	Orion.Terminate('AntiPKOFF', true);
}
function AntiPK() {

	var delay = 10;
	var range = 25;
	var isInIgnoreArea;
	
	while (Orion.Connected()) {
		Orion.Wait(delay);
		isInIgnoreArea = false;
	
	
		for(var i=0; i < AntiPKIgnoreAreas.length; i++){
			if(IsInBoundaries(Player.X(), Player.Y(), 0, AntiPKIgnoreAreas[i]) ){
				isInIgnoreArea = true;
				break;
			}
		}
		
		if(isInIgnoreArea){
			Orion.Exec('CapturePksSerial', true);
			continue;
		}

		Orion.Terminate('CapturePksSerial');

		var pksFound = Orion.FindType('0x0190|0x0191', '-1', ground, 'human', range, 'murderer|blue');
		//var bluFound =  Orion.FindType('0x0190|0x0191', '-1', ground, 'human', range, 'blue');

		//pksFound = pksFound.concat(bluFound);
		
		if (pksFound.length == 0 ) {
			continue;
		}
		
		var pkList = Orion.GetEnemyList();

		for (var i = 0; i < pksFound.length; i++) {
			found = false;
			for (j = 0; j < pkList.length; j++) {
				if (pksFound[i] == pkList[j]) {
					Orion.BlockMoving(true);
					Orion.UseType('0x0F0E', '0x0001', backpack, true); //invis
					Orion.Say('.recall 1,1');
					Orion.WarMode(false);
					Orion.Sound(107);
					Orion.CharPrint(self, 0xff, "PK[" + Orion.GetDistance((pksFound[i])) + " tiles away] " + Orion.RequestName(pkList[j])+ ' : ' + pkList[j]);
					Orion.Wait(1000);
					Orion.BlockMoving(false);
					Orion.Wait(20000);
				}
			}
		}
	}
}


function ActivateStealthSteps(){

	Orion.Say('!');
	
	while(Player.Hidden())
		Orion.Wait(50);
	
	Orion.UseSkill('Hiding');
	Orion.ClearJournal();
		
	timer = Orion.Now();
	while(!Player.Hidden() && Orion.Now() - timer < 4000 ){
		Orion.Wait(50)
	}
	
	if(Player.Hidden()){
		
		Orion.UseSkill('Stealth');
		Orion.ClearJournal();
		Orion.WaitJournal('not hidden|quietly', Orion.Now(), Orion.Now() + 10000, 'my|sys',-1,-1);		
		Orion.Say('!!');
		
	}
}

function CapturePksSerial() {

	var delay = 500;
	var found = false;

	Orion.CharPrint(self, infoColor, "Capture Pks Serial");
	
	while (true) {
		Orion.Wait(delay);
		var pksFound = Orion.FindType('0x0190|0x0191', '-1', ground, 'human', 25, 'murderer');

		if (pksFound.length == 0) {
			continue;
		}

		var pkList = Orion.GetEnemyList();

		for (var i = 0; i < pksFound.length; i++) {
			found = false;
			for (j = 0; j < pkList.length; j++) {
				if (pksFound[i] == pkList[j])
					found = true;
			}
			if (!found) {
				var pk = Orion.FindObject(pksFound[i]);
				Orion.Print(32, 'NEW PK : ' + pk.Name());
				Orion.AddEnemy(pk.Name(), pksFound[i]);
			}
		}
	}
}



//=====================================================
//=============== CRAFTS ================================
//=====================================================
function ___CRAFTS___(){}

function MakeBagsOfPVP(){

	Orion.Print(infoColor, 'If you have a Dye tub in you bag this macro will paint de bag of reagents for you.');
	Orion.Print(infoColor, 'Container with empty bags');

	Orion.AddObject('cbags');
	while (Orion.HaveTarget())
		Orion.Wait(50);
	
	Orion.Print(infoColor, 'Container with Items');
	
	Orion.AddObject('cregs');
	while (Orion.HaveTarget())
		Orion.Wait(50);
		
	Orion.Print(infoColor, 'Container to put the loaded bags');
	
	Orion.AddObject('cTo');
	while (Orion.HaveTarget())
		Orion.Wait(50);

	for(var j = 0; j < 10; j++){
	
		var bag = Orion.FindType('0x0E76', '-1', 'cbags','first', 3);
	
		Orion.MoveItem(bag[0], 1, backpack, 100,100,-1);
		Orion.UseObject(bag[0]);
	
		Orion.Wait(600);
	
		var regs =  Orion.FindType('0x0F7A|0x0F85|0x0F8D|0x0F84|0x0F7B|0x0F8C|0x0F86|0x0F88', '-1', 'cregs', 3);
		var lexplo =  Orion.FindType('0x0F02', '-1', 'cregs', 3); //lesser explosion
	
		for(var i = 0; i < regs.length; i++){
			Orion.MoveItem(regs[i], 200,bag[0], 100,100,-1);
			Orion.Wait(600);
		}
	
		for(var i = 0; i < 20; i++){
			Orion.MoveItem(lexplo[i], 1,bag[0],  Orion.Random(80, 100) , Orion.Random(60, 90) ,-1);
			Orion.Wait(600);
		}
	
		var dye =  Orion.FindType('0x0FAB', '-1',backpack);
		if(dye){
			Orion.UseObject(dye[0]);
			Orion.WaitForTarget();
			Orion.TargetObject(bag[0])
			Orion.Wait(300);
		}
	
		Orion.MoveItem(bag[0], 1,'cTo');
		Orion.Wait(600);
	}
	
}

//buy and shiirink animals
function ShrinkAnimals() {

	var mob = Orion.FindType('-1', '-1', ground, 'mobile', '3', 'gray');

	for(var i = 0; i < mob.length; i++){
	
		Orion.UseType('0x0F0E'); //use shrink
		Orion.WaitTargetObject(mob[i]);
		Orion.Wait(600);
	}
}

function LeatherClothes(){

	Orion.Print(infoColor, 'Instructions: Put the leather and sewing kit in your bag and let it run.')
	
	var leather = Orion.FindType('0x1078', '-1', backpack);
	
	if(leather.length)
		leather = Orion.FindObject(leather[0]);
	else
		return;
	
	if(leather.Count() % 36 != 0){
		Orion.Print(errorColor, 'Put leather amount multiple of 36 (36, 72, 108, 144, 180)')
		return;
	}
	
	while(leather.Count() % 36 == 0 && (leather.Count()) ){
	
		for(var i = 1; i <= 5; i ++){
	
			Orion.UseType(0x0F9D);
			Orion.WaitTargetType(0x1078);
		
			Orion.Wait(1000);
			var menu = Orion.GetMenu(0);
			Orion.Wait(1000);
			menu.Select(i);
		
			Orion.ClearJournal();
			Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 10000, -1 ,-1, -1);
		}
	}
}


function ShapedIron(){

	var iron;

	Orion.Print(infoColor, 'Container with Iron');

	//Orion.RemoveObject('cbags');
	//if('cbags' == null){
	Orion.AddObject('cbags');
	while (Orion.HaveTarget())
		Orion.Wait(50);
//}
	Orion.UseObject('cbags');
	
	while(Orion.Connected){
	
		 iron = Orion.FindType('0x1BEF', '-1', backpack);
	
		 if(!iron.length){
	 		iron = Orion.FindType('0x1BEF', '-1', 'cbags');
	 	
	 		if(iron.length){
	 			Orion.MoveItem(iron[0], 2000,backpack, -1,-1,-1);
	 			Orion.Wait(600);
	 		}
	 	 	else{
		 		Orion.Print(infoColor, 'No more iron');
		 		return;
			 }
		 }
	
		 iron = Orion.FindType('0x1BEF', '-1', backpack);
		 iron = Orion.FindObject(iron[0]);
	 

		while(iron.Count() > 10 ){
	
			Orion.UseObject(iron.Serial())
			Orion.WaitMenu('Blacksmithing', 1);
			Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 3000, -1 ,-1, -1);
			Orion.ClearJournal();
		}
	
		Orion.MoveItem(iron.Serial(), 0,'cbags', -1,-1,-1);
		Orion.Wait(600);
		iron = Orion.FindType('0x1BD7', '-1', backpack);
		Orion.MoveItem(iron[0], 0,'cbags', -1,-1,-1);
		Orion.Wait(600);
	}
}

function PotionsToSell(){

	var iron, reags;

	Orion.Print(infoColor, 'Mortar and pastle and reags must be in your backpack');
	Orion.Print(infoColor, 'Select a container with bottles');

	//Orion.RemoveObject('cbags');
	//if('cbags' == null){
	Orion.AddObject('cbags');
	while (Orion.HaveTarget())
		Orion.Wait(50);
//}
	Orion.UseObject('cbags');
	
	while(Orion.Connected){
	
		 bottles = Orion.FindType('0x0F0E', 0, backpack);
	
		 if(!bottles.length){
	 		bottles = Orion.FindType('0x0F0E', 0, 'cbags');
	 	
	 		if(bottles.length){
	 			Orion.MoveItem(bottles[0], 15,backpack, -1,-1,-1);
	 			Orion.Wait(600);
	 		}
	 	 	else{
		 		Orion.Print(infoColor, 'No more iron');
		 		return;
			 }
		 }
	
		 bottles = Orion.FindType('0x0F0E', 0, backpack);
		 bottles = Orion.FindObject(bottles[0]);
	 
	 	reags = Orion.FindType('0x0F88|0x0F84|0x0F7A', 0, backpack);

		while(bottles.Count() > 10 ){
	
			Orion.UseObject(reags[0])
			Orion.WaitMenu('Alchemy Menu', 0);
			Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 3000, -1 ,-1, -1);
			Orion.ClearJournal();
		}
	
		bottles = Orion.FindType('0x0F0E', -1, backpack);
		for(var i=0; i<bottles.length; i++){
			Orion.MoveItem(bottles[i], 0,'cbags', -1,-1,-1);
			Orion.Wait(600);
		}
	}
}


function MakeLExplosion(){

	Orion.Print(infoColor, 'Instructions: Put SS, empty bottles and mortar&pastle in your bag and let it go.')
	
	var ss = Orion.FindType('0x0F8C', 0, backpack);
	
	if(ss.length)
		ss = Orion.FindObject(ss[0]);
	else
		return;
		
	while(ss.Count() > 0 ){
	
		Orion.UseType(0x0F8C);
		Orion.WaitMenu('Alchemy menu', 0);

		Orion.ClearJournal();
		Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 10000, -1 ,-1, -1);
	}
}

function FullSpeelBook(){

// 1 - Put logs and saw in your bag.
// 2 - Must have skill to craft blank scroll.
// 3 - Tested at TFG Shard

	var scrollID = 0x1F2E;
	
	for(var circle = 3; circle <= 7; circle++){
		for(var spell = 0; spell <= 7; spell++){
			
			DEBUG2(circle + ' : '+ spell );
			
			Orion.CancelWaitMenu();		
			Orion.ClearJournal();
			
			Orion.UseType(0x1034); //saw
			Orion.WaitMenu('Carpentry', 2);
			Orion.WaitMenu('Blank Scrolls', 0);
			Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 5000, -1 ,-1, -1);
			
			Orion.CancelWaitMenu();		
			Orion.ClearJournal();
			
			Orion.UseType(0x0E34); //blank scroll
			Orion.WaitMenu('Spell Circles', circle);
						
			Orion.Wait(600);
			var menu = Orion.GetMenu(0);
			menu.Select(spell);
			Orion.WaitJournal('You put|fail', Orion.Now(), Orion.Now() + 5000, -1 ,-1, -1);
			
			
			if( Player.WarMode() == true  )
				Orion.WarMode(false);
		
				while(Player.Mana() <= 44 ){
					Orion.UseSkill('Meditation');
					Orion.Wait(1000);
				}
			//var scroll =  Orion.FindType(scrollID++, 0, backpack);
			//var spellBook = Orion.FindType(0x0EFA, 0, backpack);
			
			//Orion.MoveItem(scroll[0],1,spellBook);
			//Orion.Wait(600);
			//DEBUG2(scroll);
		}	
	}
}

function SaySell(){

	var gold;
	var restocked = false;
	
	while(Orion.Connected()){
	
		 gold = Player.Gold();
		Orion.Say('vendor sell');
		
		for(var i = 0; gold == Player.Gold(); i++  ){
			Orion.Wait(40);
			if(i > 30){
				if(!restocked){
				
					Orion.Ignore(self);
					var vendor = Orion.FindType('0x0190|0x0191', '-1', ground, 'human|first', 3, 'blue');
					Orion.UseObject(vendor[0]);
					restocked = true;
					Orion.CharPrint(self, infoColor, 'RESTOCK DONE');
					Orion.Wait(600);
					break;
				}
				Orion.Print(infoColor, 'All done selling');
				return;
			}
		}
	
	}

}


//=================================================
//============  MACROS  ==============================
//=================================================
function ___SkillMacros___(){}

function HidingAndStealth(){

	var timer;
	while(!Player.Dead()){
	
		Orion.UseSkill('Hiding');
		Orion.ClearJournal();
		
		timer = Orion.Now();
		while(!Player.Hidden() && Orion.Now() - timer < 6000 ){
		
			if(Orion.InJournal('seem to hide here|hidden', 'my|sys', -1, -1, Orion.Now() -1000, Orion.Now() + 1000) ){
				DEBUG2('Hidding Delay: ' + (Orion.Now() - timer) );
				break;
			}
			Orion.Wait(50)
		}
		
		if(Player.Hidden()){
		
			Orion.UseSkill('Stealth');
			Orion.ClearJournal();
			DEBUG2('Waiting Stealth');
			Orion.WaitJournal('not hidden|quietly', Orion.Now(), Orion.Now() + 10000, 'my|sys',-1,-1);
			DEBUG2('Stealthed...');
			
			Orion.Say('Costela de Panamino, HUMM. Nao ha coisa melhor!');
		
			while(Player.Hidden()){
			Orion.Wait(50);
			}
		}
	}
}



//=================================================
//============  DEBUG   ==============================
//=================================================
function DEBUG(msg){
	
	if(true)
		Orion.Print(debugColor, msg);
}

function DEBUG2(msg){
	
	if(true)
		Orion.Print(debugColor, msg);
}



function IsInBoundaries(x, y, precision, rect){

	 if( x >= rect.Xsmall - precision  && x <= rect.Xbig + precision &&
	     y >= rect.Ysmall - precision  && y <= rect.Ybig + precision )
	{
		return true; //in side rectangle 
	}
	
	return false; //out side rectangle  	
}

//=================================================
//============  TESTS   ==============================
//=================================================
function ___TESTS___(){}

function ping(){

	var timer, timer1;
	var cont = 0, sum = 0, med = 0, max = 0, min = 10000;
	var items = Orion.FindType(-1, '-1', -1, -1, 30, -1);
	
	if(!items.length){
		Orion.Print(infoColor, 'Please have more items arround you');
		return;
	}

	timer = Orion.Now();
	for(var i = items.length -1; i >= 0; i--){
	
		var med, count, sum;
		timer1 = Orion.Now();
		Orion.RequestName(items[i], 1000);
		timer1 = Orion.Now() - timer1;
		
		if(timer1 > 20){
			cont++;
			sum =  sum + timer1;
			med = sum/cont
			med = med.toFixed(0);
			
			if(timer1 > max)
				max = timer1;
				
			if(timer1 < min)
			min = timer1;
	
		}
		
		//Orion.Print(infoColor. self, 'Ping: ' + timer1);	
		Orion.Print(infoColor, 'ping: ' + timer1 + ' med: ' + med + ' min: ' + min + ' max: ' + max);	
	}
	
	Orion.Print(infoColor, 'Loops: ' + cont + ' Total time: ' + ( Orion.Now() - timer ) + ' ms');	
}


function DropHere(){

	Orion.Print(infoColor, 'What item do you want to drop ?');

Orion.DropHere(0);

/*
	Orion.AddObject('tmp');
	while (Orion.HaveTarget())
		Orion.Wait(50);
		*/
}



function EchoAllJournal(){

	while(true){
	
		var j = Orion.WaitJournal('a|e|i|o|u',  Orion.Now(), Orion.Now() + 10000 , -1 ,-1, -1);
		if(j)
			Orion.Print(0xff, j.Text());
		Orion.Wait(200);
	}
}


function ShowAllMobs(){

	Orion.Ignore(self);
	while(true){
	
		var mob = Orion.FindType(-1,-1,ground,'mobile',30)
		if(mob.length > 0){
		
			for(var i=0; i < mob.length; i++ ){
				var mobObj = Orion.FindObject(mob[i]);
				Orion.Print(0xff, (i+1) + '/' + mob.length + " MOB[" + Orion.GetDistance(mobObj.Serial()) + " tiles away] " + mobObj.Name());
				Orion.CharPrint(mobObj.Serial(), errorColor, (i+1) );
			}
			Orion.Print(0xff, '----------`');
		}
	Orion.Wait(200);
	}
}

function PlayAllSounds(){

	for(var i=0; i < 0xFFFF; i++){
 		DEBUG2('Playing: ' + i );
		Orion.Sound(i);
		Orion.Wait(1500);
	}
}

function PlayOneSound(){

	Orion.Wait(1500);
	Orion.Sound(107);
}

function DropZ() {

	var ZAjust = -29;
	
	

	Orion.Print(infoColor, 'Select an item to ajust height (Z axis is hard coded:' + ZAjust +')');
	Orion.AddObject('dropable');
	
	while (Orion.HaveTarget())
		Orion.Wait(50);

	
	var obj = Orion.FindObject('dropable',-1, ground, 3);
	
	Orion.Drop(obj.Serial(), 1, obj.X(), obj.Y(), + (Player.Z() + ZAjust) );
	
	Orion.Print(infoColor, 'Heigth set to: ' + obj.Z() );
	
	Orion.RemoveObject('dropable')
	

}


function decifraMap()
{

var msg='As coordenadas deste mapa';
while(true){

	if(Orion.InJournal(msg)){

		var a = Orion.InJournal(':').Text().split(':');;
		var b  = a[1].split(',');
		var c= b[0].trim().replace('"','');
		var x = c.split(' ')[0].replace('x=','');
		var y =  c.split(' ')[1].replace('y=','');
		Orion.Print(y+':'+x);


Orion.OpenOrionMap(20,20);

		Orion.ClearJournal(msg);
	
	}
}

}

function PrintColors(){

	for(var i =  0x0BB7; i >= 0; i--)	{
		Orion.Print(i,'Printing Colors: ' + i.toString(16));
		Orion.Wait(100);
	}
}

function TitleType(){


DEBUG2(Orion.CanWalk(0, 1444, 1533,  -1));


}
